using BasicLoginServer.CustomLibraries;
using BasicLoginServer.Helpers;
using BasicLoginServer.Managers;
using BasicLoginServer.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Mvc;

namespace BasicLoginServer.Managers
{
    public static class CommonManager
    {
        private const string _alg = "HmacSHA256";
        private const string _salt = "XrF62Mv2o1OEUa1rh9uG";
        private static int _expirationMinutes = 1000;
        private const string _securityToken = "token";

        public const string errorMessageForCatch = "Something went wrong. Please, contact the developers.";


        public static string GetIP(HttpRequestBase request)
        {
            string ip = request.Headers["X-Forwarded-For"]; // AWS compatibility

            if (string.IsNullOrEmpty(ip))
            {
                ip = request.UserHostAddress;
            }
            var splitShit = ip.Split(':');
            return splitShit[0];
        }

        /// <summary>
        /// Generates a token to be used in API calls.
        /// The token is generated by hashing a message with a key, using HMAC SHA256.
        /// The message is: username:ip:userAgent:timeStamp
        /// The key is: password:ip:salt
        /// The resulting token is then concatenated with username:timeStamp and the result base64 encoded.
        /// 
        /// API calls may then be validated by:
        /// 1. Base64 decode the string, obtaining the token, username, and timeStamp.
        /// 2. Ensure the timestamp is not expired.
        /// 2. Lookup the user's password from the db (cached).
        /// 3. Hash the username:ip:userAgent:timeStamp with the key of password:salt to compute a token.
        /// 4. Compare the computed token with the one supplied and ensure they match.
        /// </summary>
        public static string GenerateToken(string username, string password, string ip, string userAgent, long ticks)
        {
            string hash = string.Join(":", new string[] { username, ip, userAgent, ticks.ToString() });
            string hashLeft = "";
            string hashRight = "";

            using (HMAC hmac = HMACSHA256.Create(_alg))
            {
                hmac.Key = Encoding.UTF8.GetBytes(GetHashedPassword(password));
                hmac.ComputeHash(Encoding.UTF8.GetBytes(hash));

                hashLeft = Convert.ToBase64String(hmac.Hash);
                hashRight = string.Join(":", new string[] { username, ticks.ToString() });
            }

            return Convert.ToBase64String(Encoding.UTF8.GetBytes(string.Join(":", hashLeft, hashRight)));
        }

        /// <summary>
        /// Returns a hashed password + salt, to be used in generating a token.
        /// </summary>
        /// <param name="password">string - user's password</param>
        /// <returns>string - hashed password</returns>
        public static string GetHashedPassword(string password)
        {
            string key = string.Join(":", new string[] { password, _salt });

            using (HMAC hmac = HMACSHA256.Create(_alg))
            {
                // Hash the key.
                hmac.Key = Encoding.UTF8.GetBytes(_salt);
                hmac.ComputeHash(Encoding.UTF8.GetBytes(key));

                return Convert.ToBase64String(hmac.Hash);
            }
        }


        /// <summary>
        /// Checks if a token is valid.
        /// </summary>
        /// <param name="token">string - generated either by GenerateToken() or via client with cryptojs etc.</param>
        /// <param name="ip">string - IP address of client, passed in by RESTAuthenticate attribute on controller.</param>
        /// <param name="userAgent">string - user-agent of client, passed in by RESTAuthenticate attribute on controller.</param>
        /// <returns>bool</returns>
        //public static List<string> IsTokenValid(string token, string ip, string userAgent)
        public static bool IsTokenValid(string token, string ip, string userAgent)
        {

            List<string> info = new List<string>();

            bool result = false;

            try
            {
                // Base64 decode the string, obtaining the token:username:timeStamp.
                string key = Encoding.UTF8.GetString(Convert.FromBase64String(token));

                // Split the parts.
                string[] parts = key.Split(new char[] { ':' });
                Console.WriteLine(parts);
                if (parts.Length == 3)
                {
                    // Get the hash message, username, and timestamp.
                    string hash = parts[0];
                    string userId = parts[1];
                    long ticks = long.Parse(parts[2]);
                    DateTime timeStamp = new DateTime(ticks);

                    info.Add("hash = " + hash);
                    info.Add("username = " + userId);
                    info.Add("userAgent = " + userAgent);
                    info.Add("ip = " + ip);

                    // Ensure the timestamp is valid.
                    bool expired = Math.Abs((DateTime.UtcNow - timeStamp).TotalMinutes) > _expirationMinutes;
                    info.Add("expired = " + expired);
                    if (!expired)
                    {
                        //
                        // Lookup the user's account from the db.
                        //
                        try
                        {
                            var connectionString = CommonManager.ReturnNeededConnectionStringForCommonDatabase();
                            string sqlToCheckIfInsertionIsInProgress = "SELECT userPwd FROM tblUser WHERE userId = @userId AND ifRemoved='False'";
                            using (SqlConnection conn = new SqlConnection(connectionString))
                            {
                                conn.Open();
                                SqlCommand cmdToCheckIfInsertionIsInProgress = new SqlCommand(sqlToCheckIfInsertionIsInProgress, conn);
                                cmdToCheckIfInsertionIsInProgress.Parameters.AddWithValue("@userId", userId);

                                string decryptedUserPwd = (string)cmdToCheckIfInsertionIsInProgress.ExecuteScalar();
                                string userPwd = CustomDecrypt.Decrypt(decryptedUserPwd);
                                string computedToken = GenerateToken(userId, userPwd, ip, userAgent, ticks);

                                // Compare the computed token with the one supplied and ensure they match.
                                result = (token == computedToken);


                            }
                        }
                        catch (Exception e)
                        {
                            //Console.WriteLine(e);
                            return false;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                //Console.WriteLine(e);
                return false;
            }
            return result;
            //return info;
        }


        public static LoginReturnUserBasicInfo ReturnInfoAboutUser(string token)
        {

            LoginReturnUserBasicInfo lrubi_cl = new LoginReturnUserBasicInfo { };
            // Base64 decode the string, obtaining the token:username:timeStamp.
            string key = Encoding.UTF8.GetString(Convert.FromBase64String(token));

            // Split the parts.
            string[] parts = key.Split(new char[] { ':' });
            Console.WriteLine(parts);
            if (parts.Length == 3)
            {
                string userId = parts[1];

                try
                {
                    var connectionStringCommon = CommonManager.ReturnNeededConnectionStringForCommonDatabase();
                    string sqlToGetBasicUserInfo = @"SELECT userEmployer, userId, userUniqueDatabaseId
                                FROM tblUser WHERE userId = @userId";
                    using (SqlConnection conn = new SqlConnection(connectionStringCommon))
                    {
                        conn.Open();
                        SqlCommand cmdToGetBasicUserInfo = new SqlCommand(sqlToGetBasicUserInfo, conn);
                        cmdToGetBasicUserInfo.Parameters.AddWithValue("@userId", userId);

                        SqlDataReader dt = cmdToGetBasicUserInfo.ExecuteReader();
                        if (dt.HasRows)
                        {
                            while (dt.Read())
                            {
                                lrubi_cl.userEmployer = dt[0].ToString();
                                lrubi_cl.userId = dt[1].ToString();
                                lrubi_cl.userUniqueDatabaseId = dt[2].ToString();
                            }
                        }
                    }


                    var connectionStringHotel = CommonManager.ReturnNeededConnectionStringForHotelWithNameSent(lrubi_cl.userEmployer);
                    string sqlToGetMainUserInfo = @"SELECT userFullName, userType
                                FROM tblUserInformation WHERE userUniqueDatabaseId = @userUniqueDatabaseId";
                    using (SqlConnection conn = new SqlConnection(connectionStringHotel))
                    {
                        conn.Open();
                        SqlCommand cmdToGetMainUserInfo = new SqlCommand(sqlToGetMainUserInfo, conn);
                        cmdToGetMainUserInfo.Parameters.AddWithValue("@userUniqueDatabaseId", lrubi_cl.userUniqueDatabaseId);

                        SqlDataReader dt = cmdToGetMainUserInfo.ExecuteReader();
                        if (dt.HasRows)
                        {
                            while (dt.Read())
                            {

                                lrubi_cl.userFullName = dt[0].ToString();
                                lrubi_cl.userType = dt[1].ToString();
                            }
                        }
                    }
                }
                catch
                {
                    return lrubi_cl;
                }
            }

            return lrubi_cl;
        }




        public static string ReturnNeededConnectionStringForHotel()
        {
            return ConfigurationManager.ConnectionStrings[CommonPaths.RerurnConnectionString() + GetCurrentClaimValues.GetCurrentUserEmployer()].ConnectionString;
        }

        public static string ReturnNeededConnectionStringForHotelWithNameSent(string hotel)
        {
            return ConfigurationManager.ConnectionStrings[CommonPaths.RerurnConnectionString() + hotel].ConnectionString;
        }

        public static string ReturnNeededConnectionStringForCommonDatabase()
        {
            return ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        }


        public static List<string> ReturnAvailableRoles()
        {
            return new List<string> { ConstantValues.ROLE_ADMIN,
                ConstantValues.ROLE_FRONTDESK };
        }


        public static List<string> ReturnAvailableOrderLocations()
        {

            string connectionString = ReturnNeededConnectionStringForHotel();
            // select only those people who exist in the DB
            string sqlToGetOrderLocationsInfo = @"SELECT locationName FROM tblOrderLocations ORDER BY locationName";
            List<string> orderLocationsInfo = new List<string>();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmdToGetOrderLocationsInfo = new SqlCommand(sqlToGetOrderLocationsInfo, conn);



                using (SqlDataReader dt_ToGetOrderLocationsInfo = cmdToGetOrderLocationsInfo.ExecuteReader())
                {
                    if (dt_ToGetOrderLocationsInfo.HasRows)
                    {
                        while (dt_ToGetOrderLocationsInfo.Read())
                        {
                            orderLocationsInfo.Add(dt_ToGetOrderLocationsInfo[0].ToString().TrimEnd());
                        }
                    }
                }
            }
            return orderLocationsInfo;
        }


        public static List<string> ReturnPackageStatuses()
        {
            string connectionString = ReturnNeededConnectionStringForHotel();
            // select only those people who exist in the DB
            string sqlToGetPackageStatusesInfo = @"SELECT status FROM tblPackageStatuses ORDER BY status";
            List<string> packageStatusesInfo = new List<string>();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmdToGetPackageStatusesInfo = new SqlCommand(sqlToGetPackageStatusesInfo, conn);



                using (SqlDataReader dt_ToGetPackageStatusesInfo = cmdToGetPackageStatusesInfo.ExecuteReader())
                {
                    if (dt_ToGetPackageStatusesInfo.HasRows)
                    {
                        while (dt_ToGetPackageStatusesInfo.Read())
                        {
                            packageStatusesInfo.Add(dt_ToGetPackageStatusesInfo[0].ToString().TrimEnd());
                        }
                    }
                }
            }
            return packageStatusesInfo;
        }


        public static string ReturnFormattedDate(string dateToFormat)
        {
            string[] pickUpDateArray = dateToFormat.Split(' ');
            string realPickUpDate = DateTime.Parse(pickUpDateArray[0]).ToString(ProperDateAndTime.ReturnUserDateFormat(false));
            return realPickUpDate;
        }


        public static void InsertInfoAboutImportantActions(string tableName, string tableUniqueIdentifierName,
            string tableUniqueIdentifierValue, string actionMadeByUser, string actionType,
            string actionDate, string actionTime)
        {
            try
            {

                string connectionString = CommonManager.ReturnNeededConnectionStringForHotel();
                // select only those people who exist in the DB
                string sqlToInsertInfoAboutImportantDatabaseChanges = @"INSERT INTO tblImportantChanges
                    (tableName, tableUniqueIdentifierName, tableUniqueIdentifierValue, actionMadeByUser,
                    actionType, actionDate, actionTime)
                    VALUES 
                    (@tableName, @tableUniqueIdentifierName, @tableUniqueIdentifierValue, @actionMadeByUser,
                    @actionType, @actionDate, @actionTime)";

                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    SqlCommand cmdToInsertInfoAboutImportantDatabaseChanges = new SqlCommand(sqlToInsertInfoAboutImportantDatabaseChanges, conn);

                    cmdToInsertInfoAboutImportantDatabaseChanges.Parameters.AddWithValue("@tableName", tableName);
                    cmdToInsertInfoAboutImportantDatabaseChanges.Parameters.AddWithValue("@tableUniqueIdentifierName", tableUniqueIdentifierName);
                    cmdToInsertInfoAboutImportantDatabaseChanges.Parameters.AddWithValue("@tableUniqueIdentifierValue", tableUniqueIdentifierValue);
                    cmdToInsertInfoAboutImportantDatabaseChanges.Parameters.AddWithValue("@actionMadeByUser", actionMadeByUser);
                    cmdToInsertInfoAboutImportantDatabaseChanges.Parameters.AddWithValue("@actionType", actionType);
                    cmdToInsertInfoAboutImportantDatabaseChanges.Parameters.AddWithValue("@actionDate", actionDate);
                    cmdToInsertInfoAboutImportantDatabaseChanges.Parameters.AddWithValue("@actionTime", actionTime);

                    cmdToInsertInfoAboutImportantDatabaseChanges.ExecuteNonQuery();
                }
            }
            catch (Exception e)
            {
                //Console.WriteLine(e);
            }
        }


        [Authorize(Roles = "Admin,Frontdesk")]
        public static CommonData ReturnInfoAboutCommonData(string userEmployer)
        {

            CommonData cd = new CommonData();
            try
            {
                var connectionStringHotel = CommonManager.ReturnNeededConnectionStringForHotelWithNameSent(userEmployer);
                string sqlToGetCommonData = @"SELECT sendgridEmail, timezone, cultureInfo,
                                sendgridEmailAuthor, phoneNumber, destination, destinationAirportCode, dateFormat FROM tblCommonData";
                using (SqlConnection conn = new SqlConnection(connectionStringHotel))
                {
                    conn.Open();
                    SqlCommand cmdToGetCommonData = new SqlCommand(sqlToGetCommonData, conn);

                    SqlDataReader dt = cmdToGetCommonData.ExecuteReader();
                    if (dt.HasRows)
                    {
                        while (dt.Read())
                        {
                            cd.sendgridEmail = dt[0].ToString();
                            cd.timezone = dt[1].ToString();
                            cd.cultureInfo = dt[2].ToString();
                            cd.sendgridEmailAuthor = dt[3].ToString();
                            cd.phoneNumber = dt[4].ToString();
                            cd.dateFormat = dt[7].ToString();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            return cd;
        }




        public static string ReturnRealFormattedDate(string givenDate)
        {
            string returnedDate = string.Empty;

            if (!givenDate.Contains("1900"))
            {
                if (givenDate != null && givenDate != "")
                {
                    returnedDate = ReturnFormattedDate(givenDate);
                }
            }

            return returnedDate;
        }




        public static string ReturnRealFormattedTime(string givenTime)
        {
            string returnedTime = string.Empty;

            if (!givenTime.Contains("00:00:00"))
            {
                if (givenTime != null && givenTime != "")
                {
                    returnedTime = givenTime;
                }
            }

            return returnedTime;
        }
    }
}